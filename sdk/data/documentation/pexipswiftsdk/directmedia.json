{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When enabled, direct media feature works out-of-the-box, but there are a few conference events"},{"type":"text","text":" "},{"type":"text","text":"that need to be handled in the app."}]},{"anchor":"Implementation","level":2,"type":"heading","text":"Implementation"},{"anchor":"Enable-or-disable-direct-media","level":3,"type":"heading","text":"Enable or disable direct media"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Direct media is disabled by default. If the feature is supported by the client app,"},{"type":"text","text":" "},{"type":"text","text":"set "},{"type":"codeVoice","code":"directMedia"},{"type":"text","text":" flag on "},{"type":"codeVoice","code":"ConferenceTokenRequestFields"},{"type":"text","text":" to "},{"type":"codeVoice","code":"true"},{"type":"text","text":" when requesting a token."}]},{"type":"codeListing","syntax":"swift","code":["import PexipInfinityClient","","do {","    let conferenceService = infinityService.node(url: node).conference(alias: alias)","    let fields = ConferenceTokenRequestFields(","        displayName: \"Guest\",","        directMedia: true \/\/ false","    )","    let token = try await conferenceService.requestToken(","        fields: fields,","        pin: nil","    )","} catch let error as ConferenceTokenError {","    \/\/ The server might respond with a pin challenge, require SSO or conference extension.","    \/\/ Check ConferenceTokenError documentation to read more about all possible error types.","} catch {","    \/\/ ...","}"]},{"anchor":"Chat","level":3,"type":"heading","text":"Chat"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Chat messages are being sent via the data channel when on a direct media WebRTC call."},{"type":"text","text":" "},{"type":"text","text":"This functionality is implemented under the hood and doesn’t require any changes in the app."}]},{"anchor":"Splash-screen-event","level":3,"type":"heading","text":"Splash screen event"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Handle splash screen events if you want to display the conference background image"},{"type":"text","text":" "},{"type":"text","text":"and current status text message:"}]},{"type":"codeListing","syntax":"swift","code":["conference.receiveEvents()","","conference.eventPublisher","    .sink { event in","        do {","            switch event {","            case .splashScreen(let event):","                let text = event.elements.first(where: { $0.isTextType })?.text","                let backgroundUrl = splashScreen.background.url","            \/\/ ...","            }","        } catch {","            debugPrint(\"Cannot handle conference event, error: \\(error)\")","        }","    }","    .store(in: &cancellables)"]},{"anchor":"Peer-disconnected-event","level":3,"type":"heading","text":"Peer disconnected event"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Re-create the media connection when another peer is disconnected from a direct media call."}]},{"type":"codeListing","syntax":"swift","code":["conference.receiveEvents()","","conference.eventPublisher","    .sink { event in","        do {","            switch event {","            case .peerDisconnected:","                \/\/ 1. Stop the current media connection","                mediaConnection.stop()","","                \/\/ 2. Create new media connection","                mediaConnection = mediaFactory.createMediaConnection(","                    config: mediaConnectionConfig","                )","","                \/\/ 3. Subscribe to media connection events","                sinkMediaConnectionEvents()","","                \/\/ 4. Set your local audio and video tracks on the new media connection object","                mediaConnection.setMainAudioTrack(mainLocalAudioTrack)","                mediaConnection.setMainVideoTrack(cameraVideoTrack)","                ","                \/\/ 5. Start the media connection","                try await mediaConnection.start()","            \/\/ ...","            }","        } catch {","            debugPrint(\"Cannot handle conference event, error: \\(error)\")","        }","    }","    .store(in: &cancellables)"]},{"anchor":"Refer-event-call-transfer","level":3,"type":"heading","text":"Refer event (call transfer)"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Re-create both conference and media connection objects on "},{"type":"codeVoice","code":"refer"},{"type":"text","text":" event"},{"type":"text","text":" "},{"type":"text","text":"in order to be transferred from direct media to transcoded call and back."},{"type":"text","text":" "},{"type":"text","text":"This event is sent when more participants join or leave the conference."},{"type":"text","text":" "},{"type":"text","text":"See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PexipSwiftSDK\/documentation\/PexipSwiftSDK\/CallTransfer"},{"type":"text","text":" for more details."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/pexipswiftsdk\/directmedia"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/PexipSwiftSDK\/documentation\/PexipSwiftSDK\/DirectMedia","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Join end-to-end “direct media” RTP calls with "},{"type":"strong","inlineContent":[{"type":"text","text":"Pexip Swift SDK"}]},{"type":"text","text":"."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Direct Media","role":"article","modules":[{"name":"Pexip Swift SDK"}]},"hierarchy":{"paths":[["doc:\/\/PexipSwiftSDK\/documentation\/PexipSwiftSDK"]]},"references":{"doc://PexipSwiftSDK/documentation/PexipSwiftSDK":{"role":"collection","title":"Pexip Swift SDK","abstract":[],"identifier":"doc:\/\/PexipSwiftSDK\/documentation\/PexipSwiftSDK","kind":"symbol","type":"topic","url":"\/documentation\/pexipswiftsdk"},"doc://PexipSwiftSDK/documentation/PexipSwiftSDK/CallTransfer":{"role":"article","title":"Call Transfer","abstract":[{"type":"text","text":"Transfer a participant to another conference."}],"identifier":"doc:\/\/PexipSwiftSDK\/documentation\/PexipSwiftSDK\/CallTransfer","kind":"article","type":"topic","url":"\/documentation\/pexipswiftsdk\/calltransfer"}}}