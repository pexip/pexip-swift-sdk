{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the SDK there is the concept of a Conference. That Conference handles lots of complexity"},{"type":"text","text":" "},{"type":"text","text":"for you like:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Media signaling"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Conference events from the server"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Token handling"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It provides you with all necessary setup to make a conference call."},{"type":"text","text":" "},{"type":"text","text":"The Conference is used to create a WebRTC media connection with Infinity,"},{"type":"text","text":" "},{"type":"text","text":"to send and receive video streams."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To do a conference call you will have to go through the following steps:"}]},{"anchor":"Resolve-Conferencing-Node","level":2,"type":"heading","text":"Resolve Conferencing Node"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The clients need to provide a conference alias and a host address for the desired node."},{"type":"text","text":" "},{"type":"text","text":"The conference alias is typically a SIP address, e.g "},{"type":"codeVoice","code":"conference@example.com"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"while the host address might be either the same as the conference alias ("},{"type":"codeVoice","code":"example.com"},{"type":"text","text":") or a dedicated node on a different location ("},{"type":"codeVoice","code":"someotherurl.com"},{"type":"text","text":")."}]},{"type":"codeListing","syntax":"swift","code":["import PexipInfinityClient","","\/\/ 1. Create an instance of NodeResolver","let apiClientFactory = InfinityClientFactory(logger: DefaultLogger.infinityClient)","let nodeResolver = apiClientFactory.nodeResolver(dnssec: false)","","\/\/ 2. Create a conference alias (force unwrapping is for example only)","let alias = ConferenceAlias(uri: \"conference@example.com\")!","","\/\/ 3. Resolve the address of a Conferencing Node for the provided host","let nodes = try await nodeResolver.resolveNodes(for: alias.host)","","\/\/ 4. Find the first available node","var node: URL?","","for node in nodes {","    if try await service.node(url: url).status() {","        node = url","        break","    }","}"]},{"anchor":"Request-a-token","level":2,"type":"heading","text":"Request a token"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to start a "},{"type":"codeVoice","code":"Conference"},{"type":"text","text":" you need to have a token. You can request a token for"},{"type":"text","text":" "},{"type":"text","text":"the conference alias alongside some properties:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Display name"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Conference extension"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Chosen IDP"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"SSO token"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The server might respond with a pin challenge. Then you do another call with"},{"type":"text","text":" "},{"type":"text","text":"the same properties, and supply a pin as well."}]},{"type":"codeListing","syntax":"swift","code":["import PexipInfinityClient","","\/\/ 1. Create the name by which this participant should be known","let displayName = \"Guest\"","","\/\/ 2. Create an instance of InfinityService","let infinityService = apiClientFactory.infinityService()","","\/\/ 3. Request a token from the Pexip Conferencing Node","do {","    let conferenceService = infinityService.node(url: node).conference(alias: alias)","    \/\/ Check RequestTokenFields documentation to read more about all possible request properties","    let fields = RequestTokenFields(displayName: displayName)","    let token = try await conferenceService.requestToken(","        fields: fields,","        pin: nil","    )","} catch let error as TokenError {","    \/\/ The server might respond with a pin challenge, require SSO or conference extension.","    \/\/ Check TokenError documentation to read more about all possible error types.","} catch {","    \/\/ ...","}"]},{"anchor":"Create-a-conference","level":2,"type":"heading","text":"Create a conference"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When requesting a token you will get a response token. The response token is used to"},{"type":"text","text":" "},{"type":"text","text":"create a "},{"type":"codeVoice","code":"Conference"},{"type":"text","text":" along with the node from the previous steps and the conference alias."}]},{"type":"codeListing","syntax":"swift","code":["import PexipConference","","let conferenceFactory = ConferenceFactory(logger: DefaultLogger.conference)","","\/\/ Conference object starts refreshing the token when created.","let conference = conferenceFactory.conference(","    service: infinityService,","    node: node,","    alias: alias,","    token: token",")"]},{"anchor":"Create-local-media-tracks","level":2,"type":"heading","text":"Create local media tracks"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can create local audio and video tracks and start capture even before you"},{"type":"text","text":" "},{"type":"text","text":"set up "},{"type":"codeVoice","code":"Media Connection"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Conference"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["import PexipMedia","import PexipRTC","","let mediaConnectionFactory = WebRTCMediaConnectionFactory(logger: DefaultLogger.mediaWebRTC)","","\/\/ 1. Create a new local audio track and start audio capture","let audioTrack = mediaConnectionFactory.createLocalAudioTrack()","try await audioTrack.startCapture()","","\/\/ 2. Create a new camera track and start video capture","let cameraVideoTrack = mediaConnectionFactory.createCameraVideoTrack()","try await cameraVideoTrack?.startCapture(withVideoProfile: .high)","","\/\/ 3. Subscribe to capturing status updates","audioTrack.capturingStatus.$isCapturing.receive(on: DispatchQueue.main)","cameraVideoTrack?.capturingStatus.$isCapturing.receive(on: DispatchQueue.main)"]},{"anchor":"Set-up-media-connection","level":2,"type":"heading","text":"Set up media connection"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We use WebRTC to do media signaling at the moment. In order to set up the media connection"},{"type":"text","text":" "},{"type":"text","text":"you will need:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An active "},{"type":"codeVoice","code":"Conference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Stun URLs"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the Stun URLs to create an "},{"type":"codeVoice","code":"Ice Server"},{"type":"text","text":". That server is used along with the active "},{"type":"codeVoice","code":"Conference"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"from the previous steps, to create a "},{"type":"codeVoice","code":"Media Connection"},{"type":"text","text":". At the same time you can set properties like:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Video quality (medium, high, etc)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Presentation In Main"}]}]}]},{"type":"codeListing","syntax":"swift","code":["import PexipMedia","import PexipRTC","","let mediaConnectionFactory = WebRTCMediaConnectionFactory(logger: DefaultLogger.mediaWebRTC)","","let config = MediaConnectionConfig(","    signaling: conference.signaling,","    iceServers: [IceServer(urls: token.stunUrlStrings)],","    dscp: false,","    presentationInMain: false",")","let mediaConnection = mediaConnectionFactory.createMediaConnection(config: config)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When having an active "},{"type":"codeVoice","code":"Media Connection"},{"type":"text","text":" you are able to do things like:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Set local audio and video tracks"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start and stop the session"}]}]}]},{"type":"codeListing","syntax":"swift","code":["\/\/ 1. Set local audio and video track","mediaConnection.setMainVideoTrack(cameraVideoTrack)","mediaConnection.setMainAudioTrack(audioTrack)","","\/\/ 2. Start a media session","try await mediaConnection.start()"]},{"anchor":"Handle-media-connection-events","level":2,"type":"heading","text":"Handle media connection events"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Listen to media connection events in order to:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Be notified about media connection state changes"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Receive remote video and presentation tracks"}]}]}]},{"type":"codeListing","syntax":"swift","code":["\/\/ 1. Handle state events","mediaConnection.statePublisher","    .sink { event in","        switch event {","        case .new, .connecting:","            print(\"Connecting...\")","        case .connected:","            print(\"Connected\")","        case .failed, .closed, .disconnected:","            print(\"Disconnected\")","        case .unknown:","            break","        }","    }","    .store(in: &cancellables)","","\/\/ 2. Subscribe to remote video track updates","mediaConnection.remoteVideoTracks.$mainTrack.receive(on: DispatchQueue.main)","mediaConnection.remoteVideoTracks.$presentationTrack.receive(on: DispatchQueue.main)        "]},{"anchor":"Handle-conference-events","level":2,"type":"heading","text":"Handle conference events"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Subscribe to conference events in order to:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Receive remote presentation from another participant of the conference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Be notified when the participant is being disconnected from the Pexip side"}]}]}]},{"type":"codeListing","syntax":"swift","code":["await conference.receiveEvents()","","conference.eventPublisher","    .sink { event in","        do {","            switch event {","            case .presentationStart(let message):","                try mediaConnection.receivePresentation(true)","            case .presentationStop:","                try mediaConnection.receivePresentation(false)","            case .clientDisconnected:","                \/\/ Leave the conference here","                break","            }","        } catch {","            debugPrint(\"Cannot handle conference event, error: \\(error)\")","        }","    }","    .store(in: &cancellables)"]},{"anchor":"Render-video","level":2,"type":"heading","text":"Render video"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The media signaling gives the video tracks for you to render in the UI."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"SwiftUI component"}]},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["import PexipMedia","","\/\/ Regular","VideoComponent(","    track: mediaConnection.remoteVideoTracks.mainTrack,","    contentMode: .fit_16x9,",")","","\/\/ Vertical video","VideoComponent(","    track: mediaConnection.remoteVideoTracks.presentationTrack,","    contentMode: .fit_16x9,","    isReversed: true",")","","\/\/ Mirrored","VideoComponent(","    track: cameraVideoTrack,","    contentMode: .fitQualityProfile(.high),","    isMirrored: true",")"]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"UIKit view"}]},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["import PexipMedia","","let view = VideoView()","view.isMirrored = true","cameraVideoTrack.setRenderer(view, aspectFit: true)   "]},{"anchor":"Chat","level":2,"type":"heading","text":"Chat"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If chat is enabled for the conference, you can send and receive text messages with the help"},{"type":"text","text":" "},{"type":"text","text":"of dedicated "},{"type":"codeVoice","code":"Chat"},{"type":"text","text":" object accessible from the active "},{"type":"codeVoice","code":"Conference"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["let chat = conference.chat","","\/\/ 1. Send a chat message ","try await chat?.sendMessage(\"Hello world!\")","","\/\/ 2. Receive incoming chat messages","chat?.publisher.sink(receiveValue: { message in","    print(\"\\(message.senderName): \\(message.payload)\")","}).store(in: &cancellables)"]},{"anchor":"Roster-list","level":2,"type":"heading","text":"Roster list"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"Roster"},{"type":"text","text":" object to get the full participant list of the conference"},{"type":"text","text":" "},{"type":"text","text":"and subscribe to participant updates."}]},{"type":"codeListing","syntax":"swift","code":["let roster = conference.roster","","\/\/ 1. Render the names of all conference participants in SwiftUI","ForEach(roster.participants) { participant in","    Text(participant.displayName)","}","","\/\/ 2. Subscribe to participant updates","roster.$participants.sink(receiveValue: { prticipants in","    print(\"Number of participants: \\(prticipants.count)\")","}).store(in: &cancellables)","","roster.eventPublisher.sink(receiveValue: { event in","    switch event {","    case .added(let participant):","        print(\"\\(participant.displayName) joined\")","    case .deleted(let participant):","        print(\"\\(participant.displayName) left\")","    case .updated, .reloaded:","        break","    }","}"]},{"anchor":"Leave-the-conference","level":2,"type":"heading","text":"Leave the conference"},{"type":"codeListing","syntax":"swift","code":["\/\/ 1. Release the token, unsubscribe from conference events, etc","try await conference.leave()","","\/\/ 2. Terminate all media and deallocate resources","mediaConnection.stop()","","\/\/ 3. Stop audio\/video capture","audioTrack.stopCapture()","cameraVideoTrack?.stopCapture()"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/pexipswiftsdk\/gettingstarted"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/PexipSwiftSDK\/documentation\/PexipSwiftSDK\/GettingStarted","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn how to initiate or connect to conferences hosted on the Pexip Infinity platform."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Getting Started with Pexip Swift SDK","role":"article","modules":[{"name":"Pexip Swift SDK"}]},"hierarchy":{"paths":[["doc:\/\/PexipSwiftSDK\/documentation\/PexipSwiftSDK"]]},"references":{"doc://PexipSwiftSDK/documentation/PexipSwiftSDK":{"role":"collection","title":"Pexip Swift SDK","abstract":[],"identifier":"doc:\/\/PexipSwiftSDK\/documentation\/PexipSwiftSDK","kind":"symbol","type":"topic","url":"\/documentation\/pexipswiftsdk"}}}