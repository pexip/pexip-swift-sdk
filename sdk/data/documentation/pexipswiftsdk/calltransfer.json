{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The current participant can be transferred to another conference, either by the host or"},{"type":"text","text":" "},{"type":"text","text":"when transitioning from direct media to transcoded call and back. In this case both conference"},{"type":"text","text":" "},{"type":"text","text":"and media connection objects need to be re-created on "},{"type":"codeVoice","code":"refer"},{"type":"text","text":" event."}]},{"type":"codeListing","syntax":"swift","code":["conference.receiveEvents()","","conference.eventPublisher","    .sink { event in","        do {","            switch event {","            case .refer(let event):","                \/\/ 1. Leave the current conference (release token, unsubscribe from events, etc)","                await conference.leave()","                ","                \/\/ 2. Stop media connection","                mediaConnection.stop()","                ","                \/\/ 3. Request new conference token using the one time token from the event","                let alias = ConferenceAlias(uri: event.alias)!","                let node = try await infinityService.resolveNodeURL(","                    forHost: alias.host,","                    using: nodeResolver","                )","                let conferenceService = infinityService.node(url: node).conference(alias: alias)","                let fields = ConferenceTokenRequestFields(displayName: \"Guest\")","                let newToken = try await conferenceService.requestToken(","                    fields: fields,","                    incomingToken: event.token","                )","","                \/\/ 4. Create new conference and media connection objects ","                \/\/    (same as when joining a call)","                let conference = apiClientFactory.conference(","                    node: node,","                    alias: alias,","                    token: token","                )","                let mediaConnection = mediaFactory.createMediaConnection(config: config)","","                \/\/ 5. Open another view with newly created conference and media connection objects","                \/\/ ...","            \/\/ ...","            }","        } catch {","            debugPrint(\"Cannot handle conference event, error: \\(error)\")","        }","    }","    .store(in: &cancellables)"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/pexipswiftsdk\/calltransfer"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/PexipSwiftSDK\/documentation\/PexipSwiftSDK\/CallTransfer","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Transfer a participant to another conference."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Call Transfer","role":"article","modules":[{"name":"Pexip Swift SDK"}]},"hierarchy":{"paths":[["doc:\/\/PexipSwiftSDK\/documentation\/PexipSwiftSDK"]]},"references":{"doc://PexipSwiftSDK/documentation/PexipSwiftSDK":{"role":"collection","title":"Pexip Swift SDK","abstract":[],"identifier":"doc:\/\/PexipSwiftSDK\/documentation\/PexipSwiftSDK","kind":"symbol","type":"topic","url":"\/documentation\/pexipswiftsdk"}}}